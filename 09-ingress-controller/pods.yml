--- 
apiVersion: v1
kind: Pod
metadata:
  name: app1
  labels:
    app: app1
spec:
  containers:
  - name: httpd
    image: rkalluru/k04-ingress-app1:v1 
    resources:
      limits:
        memory: "128Mi"
        cpu: "100m"
      requests:
        memory: "64Mi"
        cpu: "100m"

---
apiVersion: v1
kind: Service
metadata:
  name: app1-svc
spec:
  selector:
    app: app1
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80

--- 
apiVersion: v1
kind: Pod
metadata:
  name: app2
  labels:
    app: app2
spec:
  containers:
  - name: httpd
    image: rkalluru/k04-ingress-app2:v1 
    resources:
      limits:
        memory: "128Mi"
        cpu: "100m"
      requests:
        memory: "64Mi"
        cpu: "100m"

---
apiVersion: v1
kind: Service
metadata:
  name: app2-svc
spec:
  selector:
    app: app2
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80

---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: pod-ingress
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - http:
      paths:
      - path: /app1
        backend:
          serviceName: app1-svc
          servicePort: 80
      - path: /app2
        backend:
          serviceName: app2-svc
          servicePort: 80

---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: name-ingress
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  tls:
  - hosts:
    - app1.devopsproj.com
    secretName: app1-tls
  rules:
  - host: app1.devopsproj.com
    http:
      paths:
      - backend:
          serviceName: app1-svc
          servicePort: 80
  - host: app2.devopsproj.com
    http:
      paths:
      - backend:
          serviceName: app2-svc
          servicePort: 80

---
apiVersion: v1
kind: Secret
metadata:
  name: app1-tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZYekNDQkVlZ0F3SUJBZ0lTQTNSQU5WWHdWZ1Y1U3NycFNQdkNTUVNOTUEwR0NTcUdTSWIzRFFFQkN3VUEKTUVveEN6QUpCZ05WQkFZVEFsVlRNUll3RkFZRFZRUUtFdzFNWlhRbmN5QkZibU55ZVhCME1TTXdJUVlEVlFRRApFeHBNWlhRbmN5QkZibU55ZVhCMElFRjFkR2h2Y21sMGVTQllNekFlRncweE9UQTRNamt4TlRBMU1qZGFGdzB4Ck9URXhNamN4TlRBMU1qZGFNQjR4SERBYUJnTlZCQU1URTJGd2NERXVaR1YyYjNCemNISnZhaTVqYjIwd2dnRWkKTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDdUllZE9DdmcxZHFWYXZ3eUwycDNrMEFqTwp2SlRvV0loN3FLT2wyMjEvQitTZ0ZONjZQdiszOFVSODhhSkVCNE5IdSs0YUZFdWJLVEFzU3EvcVJjOFJKOWdwCjh2dGxvWWRwVG5hU1pidXNPcmdZc2J0dXRydUZKMXhjRnlDb0VTTEhHWnloem9vaEtNRmtpeFJpVkM0RzNqU2EKbjJmczR0VGd0Q2g0ZlBzTEdBZ2s1ckthL2U3K3R4Ny9pRE54WURqZkFSYjJKRWs2eVJtZXNQaURaZXNVUTV3OQorQTVUdHZ4UWc3YXpWWXJrYWJzYmN2OFBrb0RFTjVjSXhGYmJ5RFV3ZEdNMDk5TXhRYU5abkhPRDAySG5Za2dTClkyUFFIWThiMU5iSVQ5V1ZJMVcyK25XVDFmUjR6VjIxc3MzVHRUaHlWNHdhb2JqaFBqZnluckdLamZxVkFnTUIKQUFHamdnSnBNSUlDWlRBT0JnTlZIUThCQWY4RUJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFRwpDQ3NHQVFVRkJ3TUNNQXdHQTFVZEV3RUIvd1FDTUFBd0hRWURWUjBPQkJZRUZPakxhdThObmM4T2FTVVIxY25WClNFNzY3TW9ZTUI4R0ExVWRJd1FZTUJhQUZLaEthbU1FZmQyNjV0RTV0NlpGWmUvenFPeWhNRzhHQ0NzR0FRVUYKQndFQkJHTXdZVEF1QmdnckJnRUZCUWN3QVlZaWFIUjBjRG92TDI5amMzQXVhVzUwTFhnekxteGxkSE5sYm1OeQplWEIwTG05eVp6QXZCZ2dyQmdFRkJRY3dBb1lqYUhSMGNEb3ZMMk5sY25RdWFXNTBMWGd6TG14bGRITmxibU55CmVYQjBMbTl5Wnk4d0hnWURWUjBSQkJjd0ZZSVRZWEJ3TVM1a1pYWnZjSE53Y205cUxtTnZiVEJNQmdOVkhTQUUKUlRCRE1BZ0dCbWVCREFFQ0FUQTNCZ3NyQmdFRUFZTGZFd0VCQVRBb01DWUdDQ3NHQVFVRkJ3SUJGaHBvZEhSdwpPaTh2WTNCekxteGxkSE5sYm1OeWVYQjBMbTl5WnpDQ0FRVUdDaXNHQVFRQjFua0NCQUlFZ2ZZRWdmTUE4UUIzCkFHOVRkcXd4OERFWjJKa0FwRkVWLzNjVkhCSFpBc0VBS1FhTnNnaWFOOWtUQUFBQmJONGY0MmdBQUFRREFFZ3cKUmdJaEFKVTFSS0lBc3RWZlJadlN4dlNEK3V4WGhMME1DcndPRlNXOUgwYWpyeFovQWlFQWxRNDVvNVk3TzZMOQp3WUVnU3pSdktOUlBvVXNxaXB3TGtjRGxCNm8zbkxjQWRnQXBQRkdXVk1nNVpicXFVUHhZQjlTM2I3OVllaWx5CjNLVEREUFRsUlVmMGVBQUFBV3plSCtOa0FBQUVBd0JITUVVQ0lGaWN2YmhMTmRVZ1RqVU5lcUlmSWV0NjNrOTAKbkJoSGRjNGp0ZzFlcDN0RkFpRUFuL21HYmp4T1ZQdUtjNVdDQ1RoT0F0S0RCZ29iSnJ1WFBPSytDSzhQQUpJdwpEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBRXFGV0M3ekxpTGtZbTM3cjNkRlJmQy93NWNTbGJmSE56VzRTVnpKCkVTcEJDMHZ4b3d3OUpLbW5rOTVGYjAzdTFLK3VCUTRZN0pCOE1qZG0xOEptZUlTUmVNZlVCcDVQRGw0djRNK1cKdmdFWTBuQzYwbjhsbk9RamQ5aXZYbGhQMWF0QmlMWWw3a2xabDhuSU1PMGw4MzcycUttUFh2RGxVRWJ4MmJUWgpkVFBLYUx4Smg2WUppazhKVTBBZjUrUlgzcXVYQUxMRkUxTCtCVjNyeU9ZZFVGV1pNcVE3SGIvMWFsV29abnRHCld2S3JpajEyOFZKZ0x6VXZVNlR0Mk1wSWhwRmN0bHYzZXFpdjRoOE1FNmRPbG9LbHpKWDhONmhlTE5nWExXYzAKcG9PdHplTWlNaEhsMy84SmpkdUdMZmJMZCtwRHFUMnhKS3VEN2NQZzdpdWFXVlE9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVrakNDQTNxZ0F3SUJBZ0lRQ2dGQlFnQUFBVk9GYzJvTGhleW5DREFOQmdrcWhraUc5dzBCQVFzRkFEQS8KTVNRd0lnWURWUVFLRXh0RWFXZHBkR0ZzSUZOcFoyNWhkSFZ5WlNCVWNuVnpkQ0JEYnk0eEZ6QVZCZ05WQkFNVApEa1JUVkNCU2IyOTBJRU5CSUZnek1CNFhEVEUyTURNeE56RTJOREEwTmxvWERUSXhNRE14TnpFMk5EQTBObG93ClNqRUxNQWtHQTFVRUJoTUNWVk14RmpBVUJnTlZCQW9URFV4bGRDZHpJRVZ1WTNKNWNIUXhJekFoQmdOVkJBTVQKR2t4bGRDZHpJRVZ1WTNKNWNIUWdRWFYwYUc5eWFYUjVJRmd6TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQwpBUThBTUlJQkNnS0NBUUVBbk5NTThGcmxMa2UzY2wwM2c3Tm9ZekRxMXpVbUdTWGh2YjQxOFhDU0w3ZTRTMEVGCnE2bWVOUWhZN0xFcXhHaUhDNlBqZGVUbTg2ZGljYnA1Z1dBZjE1R2FuL1BRZUdkeHlHa09sWkhQL3VhWjZXQTgKU014K3lrMTNFaVNkUnh0YTY3bnNIamNBSEp5c2U2Y0Y2czVLNjcxQjVUYVl1Y3Y5YlR5V2FOOGpLa0tRRElaMApaOGgvcFpxNFVtRVVFejlsNllLSHk5djZEbGIyaG9uemhUK1hocSt3M0JydmF3MlZGbjNFSzZCbHNwa0VObldBCmE2eEs4eHVRU1hndm9wWlBLaUFsS1FUR2RNRFFNYzJQTVRpVkZycW9NN2hEOGJFZnd6Qi9vbmt4RXowdE52amoKL1BJemFyazVNY1d2eEkwTkhXUVdNNnI2aENtMjFBdkEySDNEa3dJREFRQUJvNElCZlRDQ0FYa3dFZ1lEVlIwVApBUUgvQkFnd0JnRUIvd0lCQURBT0JnTlZIUThCQWY4RUJBTUNBWVl3ZndZSUt3WUJCUVVIQVFFRWN6QnhNRElHCkNDc0dBUVVGQnpBQmhpWm9kSFJ3T2k4dmFYTnlaeTUwY25WemRHbGtMbTlqYzNBdWFXUmxiblJ5ZFhOMExtTnYKYlRBN0JnZ3JCZ0VGQlFjd0FvWXZhSFIwY0RvdkwyRndjSE11YVdSbGJuUnlkWE4wTG1OdmJTOXliMjkwY3k5awpjM1J5YjI5MFkyRjRNeTV3TjJNd0h3WURWUjBqQkJnd0ZvQVV4S2V4cEhzc2NmcmI0VXVRZGYvRUZXQ0ZpUkF3ClZBWURWUjBnQkUwd1N6QUlCZ1puZ1F3QkFnRXdQd1lMS3dZQkJBR0MzeE1CQVFFd01EQXVCZ2dyQmdFRkJRY0MKQVJZaWFIUjBjRG92TDJOd2N5NXliMjkwTFhneExteGxkSE5sYm1OeWVYQjBMbTl5WnpBOEJnTlZIUjhFTlRBegpNREdnTDZBdGhpdG9kSFJ3T2k4dlkzSnNMbWxrWlc1MGNuVnpkQzVqYjIwdlJGTlVVazlQVkVOQldETkRVa3d1ClkzSnNNQjBHQTFVZERnUVdCQlNvU21wakJIM2R1dWJST2JlbVJXWHY4Nmpzb1RBTkJna3Foa2lHOXcwQkFRc0YKQUFPQ0FRRUEzVFBYRWZOaldEamRHQlg3Q1ZXK2RsYTVjRWlsYVVjbmU4SWtDSkx4V2g5S0VpazNKSFJSSEdKbwp1TTJWY0dmbDk2UzhUaWhSelp2b3JvZWQ2dGk2V3FFQm10enczV29kYXRnK1Z5T2VwaDRFWXByLzF3WEt0eDgvCndBcEl2SlN3dG1WaTRNRlU1YU1xclNERTZlYTczTWoydGNNeW81ak1kNmptZVdVSEs4c28vam9XVW9IT1Vnd3UKWDRQbzFRWXorM2RzemtEcU1wNGZrbHhCd1hSc1cxMEtYelBNVForc09QQXZleXhpbmRtamtXOGxHeStRc1JsRwpQZlorRzZaNmg3bWplbTBZK2lXbGtZY1Y0UElXTDFpd0JpOHNhQ2JHUzVqTjJwOE0rWCtRN1VOS0VrUk9iM042CktPcWtxbTU3VEgySDNlREpBa1NuaDYvRE5GdTBRZz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2Z0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktnd2dnU2tBZ0VBQW9JQkFRQ3VJZWRPQ3ZnMWRxVmEKdnd5TDJwM2swQWpPdkpUb1dJaDdxS09sMjIxL0IrU2dGTjY2UHYrMzhVUjg4YUpFQjROSHUrNGFGRXViS1RBcwpTcS9xUmM4Uko5Z3A4dnRsb1lkcFRuYVNaYnVzT3JnWXNidHV0cnVGSjF4Y0Z5Q29FU0xIR1p5aHpvb2hLTUZrCml4UmlWQzRHM2pTYW4yZnM0dFRndENoNGZQc0xHQWdrNXJLYS9lNyt0eDcvaUROeFlEamZBUmIySkVrNnlSbWUKc1BpRFplc1VRNXc5K0E1VHR2eFFnN2F6Vllya2Fic2JjdjhQa29ERU41Y0l4RmJieURVd2RHTTA5OU14UWFOWgpuSE9EMDJIbllrZ1NZMlBRSFk4YjFOYklUOVdWSTFXMituV1QxZlI0elYyMXNzM1R0VGh5VjR3YW9iamhQamZ5Cm5yR0tqZnFWQWdNQkFBRUNnZ0VBUlV0NG9MWDgwRW5HdzdZRGFDUTNjVGJZU20wQlZQVG1XMDlnMEQvaDh3dFIKRCtNK1B4K1M0OEEvWVBsSGVZc0QweWdXT0lxYkM4UDRSNmZ4R1dsdVhZVmRvRlB4ZHlBd290ZDJtQXVrQTRYYQpmUGs5ZlhGNmJpS2J2b24xbE93OHlyNkdkbDJhMmxjOW5xVTZGMmNvYWRORFc4VFR0cEVONWQzTHZTYi9RQXBICklUY1F6d0VtQ1VoUUU4cWhPRldtT3VMc1dnQzY4UUFqYnNWWlN4cnVXTDVmY0R1aVE0bHFmbHVweEJRTlRobWgKcHMyT25yZExFdS8ybE56bGQvdzJiYUJBTzRpZGlrMjhwbDlhMzVwY3FZckdieS9yQ0RLWVZMQWlGMk9EbFc1YwpVY0VON0R1eE8wbllPb1dQUmxWVEV0K0tXb3E3aksxU3A3OXBleGt5Z1FLQmdRRHIxTmwvNkQwMWozaDRCbGd0Cm1WbmI3QytDblRWQkxrQUlHRlBsWFhJOVNjVENsekk0T1lQcnpDcXJTb0tuUEpEN2o5MHBvYXdzOTMzM1piRlIKQXV6NDgzdTJhMGM0NWs0NHNvejJML3JVLzYweUNPb3cyWWhQMnk5SjRZc1I2Q2U2eWNnS3ZRQ3BHbjNaWHcyMwp2cUUzUERmRGxaYUJFME1BNWNtWkJseTFDd0tCZ1FDOUJrRFpibW9qTC9lNmZJbW05Qkgvenp2OTZ5NUdzbThjClgxUGk3WWNQbWE3OFg5VUwwc2doRnFtdzhyMWI4RmFOU0lmTmRNQ0p1ZTFidmVXSVQrTkN2T2ZrSE5lZTBaZngKTldSSmduQ2QxQ2pXQklyWWs2bFlUMU9vZUNXUFNkeWw2MWFMRCtncWVhL0IzSHBGWlhIOURDb3RGOWNzUkZCWQpjLzlVNFNTUzN3S0JnUUNpVTNJYVhvcXpNVHZrc2NsRUtjZjJYczRkQTRUQ2hzbEFTUzZHTkJvTUlaaXpzRXE2CjlLdmZSRHNpaURrQ1QrZ2puOVRGY1NrSUVwcThEVjFOdTh2TldCc1JaeW93K2lWaFZWVTlwNnpwcTh0VkkxbS8Kb2h2M2k1RXpNM0g4TTJZVlpncXhpWUxJNHhrNDQvcVhQVG5Pd1Q1SSs5QUtyRzEwVXJhL0ErZ1FIUUtCZ1FDRgppdzV6enVNamV2Y2RCSEZIeDNXVDhmZ2pXMjAxTzBqdWxaYXhZemloVitWZG5lTHBXSUJWaUNwWXZoWDBCMmRPCnA2aHlDZ01oQ245YjZseG9vbkFmclZCelE4RStEanUzaVE0U05ScVZGdGZHNUN5bitDS1RKbkFuUE1Ma2FiMSsKWnphY1JwK3lxb2YyZ1dyTTdtL0s1RFpENTJ6NGRFY0RSdWhrTWkvaHB3S0JnRVg0Zit2MkpseXpsUWZ4b3lYUgoxaC9qbGxaelNKbzQ0eGxzNlVpZHlSZGVrQm9NTDhhNkpscjJFbWVrVnRpd3RFQkJIU0hDQUQ3V2VMUjJnVmJpCm80UllTUDhNcVhFb0hXam1qSnNsR0w5MU5hQ08wQ2xMRTBUQTViQjk1UDB2dVVYU0JlNjJsOW5pKytFd2luNXMKckJPQ29UUDFxREc1QzB1b0E1bnRrdkZ3Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
type: kubernetes.io/tls